{"version":3,"sources":["CRRadio.js","ECard.js","ListEntr.js","Selector.js","App.js","reportWebVitals.js","index.js"],"names":["CRRadio","props","useState","crea","setCrea","radi","setRadi","id","Col","checked","onChange","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","width","className","ECard","Toast","style","padding","Row","fontSize","textAlign","name","list_entreprises","type","content","getListStyle","isDraggingOver","background","overflowY","Selector","React","memo","initialState","items","slice","selected","useReducer","state","action","console","log","destination","draggableId","source","current_pos","index","futur_pos","droppableId","selectedItem","filter","item","toString","splice","dispatch","onDragEnd","retour","Grid","container","direction","justifyContent","alignItems","xs","provided","snapshot","Card","ref","innerRef","map","draggableProps","dragHandleProps","placeholder","styleDict","margin","CollEntr","expanded","setExpanded","handleChange","panel","event","newExpanded","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51eab2fa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport Switch from \"react-switch\";\r\nexport const CRRadio = (props) => {\r\n  const [crea, setCrea] = useState(false);\r\n  const [radi, setRadi] = useState(false);\r\n  const id = props.id\r\n  return (\r\n    <>\r\n      <Col>\r\n        <p>Créations</p>\r\n        <Switch\r\n          checked={crea}\r\n          onChange={() => setCrea(!crea)}\r\n          onColor=\"#86d3ff\"\r\n          onHandleColor=\"#2693e6\"\r\n          handleDiameter={25}\r\n          uncheckedIcon={false}\r\n          checkedIcon={false}\r\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\r\n          height={18}\r\n          width={40}\r\n          className=\"react-switch\"\r\n          id= {`crea-${id}`}\r\n        />\r\n      </Col>\r\n      <Col>\r\n        <p>Radiations</p>\r\n        <Switch\r\n          checked={radi}\r\n          onChange={() => setRadi(!radi)}\r\n          onColor=\"#86d3ff\"\r\n          onHandleColor=\"#2693e6\"\r\n          handleDiameter={25}\r\n          uncheckedIcon={false}\r\n          checkedIcon={false}\r\n          boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\r\n          activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\r\n          height={18}\r\n          width={40}\r\n          className=\"react-switch\"\r\n          id={`radi-${id}`}\r\n        />\r\n      </Col>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Toast, Row, Col } from \"react-bootstrap\";\r\nimport { CRRadio } from \"./CRRadio\";\r\nexport const ECard = (props) => {\r\n  return (\r\n    <li className=\"list-group-item\">\r\n      <Toast style={{ padding: \"5px\" }}>\r\n        <Row className=\"align-items-center\" style = {{padding : '0px', fontSize : '12px'}}>\r\n          <Col\r\n            className=\"align-items-center\"\r\n            style={{ textAlign: \"center\", fontSize: \"1.1em\" }}\r\n          >\r\n            {props.name}\r\n          </Col>\r\n            <CRRadio id= {props.id} />\r\n        </Row>\r\n      </Toast>\r\n    </li>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport { ECard } from './ECard';\r\nconst list_entreprises = [\r\n    { id: \"0\", type: \"Restauration\", content : <ECard name = \"Restauration\"/> },\r\n    { id: \"1\", type: \"Numérique\", content : <ECard name = \"Numérique\"/> },\r\n    { id: \"2\", type: \"Hébergement\" , content : <ECard name = \"Hébergement\"/>},\r\n  ];\r\nconst ListEntr = () => {\r\n    return (\r\n        <>\r\n        <ul className=\"list-group\">\r\n          {list_entreprises.map((entr) => {\r\n            return <ECard name={entr.type} id  = {entr.id} />;\r\n          })}\r\n        </ul>\r\n      </>\r\n    )\r\n}\r\nexport {ListEntr, list_entreprises};\r\n\r\n\r\n","import React, { Component , useReducer} from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { list_entreprises } from './ListEntr';\r\nimport { ECard } from './ECard';\r\nimport {Box, Container, Accordion, Button, Grid, Card} from'@material-ui/core'\r\n// a little function to help us with reordering the result\r\nconst grid = 5;\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgray',\r\n    padding: 10,\r\n    width: '100%',\r\n    height :'75%',\r\n    overflowY: 'hidden',\r\n});\r\n\r\n\r\nconst Selector = React.memo(() => {\r\n    let initialState = { items: list_entreprises.slice(0,2), selected : list_entreprises.slice(2,3) };\r\n    const dragReducer = (state, action) => {\r\n    console.log(action)\r\n    const {destination,draggableId,source} = action.type \r\n    if (destination !== null){\r\n        const current_pos = source.index\r\n        const futur_pos = destination.index\r\n            if  (source.droppableId === 'entreprise'){\r\n                let selectedItem = state.items.filter(item =>item.id === draggableId.toString())[0]\r\n                state.items.splice(current_pos,1)\r\n                if (destination.droppableId === 'entreprise') {\r\n                    state.items.splice(futur_pos,0,selectedItem)\r\n                } else {\r\n                    state.selected.splice(futur_pos,0,selectedItem)\r\n                }\r\n\r\n            } else {\r\n                let selectedItem = state.selected.filter(item =>item.id === draggableId.toString())[0]\r\n                state.selected.splice(current_pos,1)\r\n                if (destination.droppableId === 'entreprise') {\r\n                    state.items.splice(futur_pos,0,selectedItem)\r\n                } else {\r\n                    state.selected.splice(futur_pos,0,selectedItem)\r\n                }\r\n            }\r\n        }\r\n        return state\r\n      };\r\n\r\n    const [state, dispatch] = useReducer(dragReducer, initialState);\r\n\r\n    const onDragEnd = (retour) => {\r\n        dispatch({'type' : retour})\r\n    }\r\n\r\n\r\n            return (\r\n                <div className=  'DropContext'>\r\n                <DragDropContext onDragEnd={onDragEnd}>\r\n                    <Grid     \r\n                        container\r\n                        direction=\"row\"\r\n                        justifyContent=\"space-evenly\"\r\n                        alignItems=\"center\">\r\n                        <Grid item xs = {6}>\r\n                            <h5>Prennez un secteur d'activité...</h5>\r\n                            <Droppable droppableId=\"entreprise\">\r\n                                {(provided, snapshot) => (\r\n                                    <Card\r\n                                        ref={provided.innerRef}\r\n                                        style ={getListStyle(snapshot.isDraggingOver)}\r\n                                    >\r\n                                        {state.items?.map((item, index) => (\r\n                                            <Draggable\r\n                                                key={item.id}\r\n                                                draggableId={item.id}\r\n                                                index={index}>\r\n                                                {(provided, snapshot) => (\r\n                                                    <div\r\n                                                        className = 'entrCard'\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                               >\r\n                                                        {item.content}\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                        {provided.placeholder}\r\n                                    </Card>\r\n                                )}\r\n                            </Droppable>\r\n                        </Grid>\r\n                        <Grid item xs = {6}>\r\n                           <h5>Et déposez le ici !</h5>\r\n                            <Droppable droppableId=\"selected\">\r\n                                {(provided, snapshot) => (\r\n                                    <Card\r\n                                        ref={provided.innerRef}\r\n                                        style ={getListStyle(snapshot.isDraggingOver)}\r\n                                       >\r\n                                        {state.selected?.map((item, index) => (\r\n                                            <Draggable\r\n                                                key={item.id}\r\n                                                draggableId={item.id}\r\n                                                index={index}>\r\n                                                {(provided, snapshot) => (\r\n                                                    <div\r\n                                                        className = 'entrCard'\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                 >\r\n                                                        {item.content}\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                        {provided.placeholder}\r\n                                    </Card>\r\n                                )}\r\n                            </Droppable>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DragDropContext>\r\n        </div>\r\n        );\r\n})\r\n\r\nexport default Selector\r\n\r\n// Put the things into the DOM!","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport React, { useState } from \"react\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport {\n  Grid,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n} from \"@material-ui/core\";\nimport Selector from \"./Selector\";\n\n\nconst styleDict = {textAlign : 'center', margin: 'auto', width : '90%'}\nconst CollEntr = () => {\n  const [expanded, setExpanded] = useState(\"panel1\");\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  return (\n    <>\n      <Accordion\n        style={styleDict}\n        expanded={expanded === \"panel1\"}\n        onChange={handleChange(\"panel1\")}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography className=\"bouuu\">\n            Choisir secteur(s) d'activité(s)\n          </Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Selector />\n        </AccordionDetails>\n      </Accordion>\n      <Accordion\n        style={styleDict}\n        expanded={expanded === \"panel2\"}\n        onChange={handleChange(\"panel2\")}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel2a-content\"\n          id=\"panel2a-header\"\n        >\n          <Typography className=\"bouuu\">Visualisez !</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>salut salut salut </Typography>\n        </AccordionDetails>\n      </Accordion>\n    </>\n  );\n};\n\nconst App = () => {\n  return (\n    <>\n      <CollEntr />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}